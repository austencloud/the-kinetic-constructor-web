<script lang="ts">
	import { onMount, setContext } from 'svelte';
	import { get } from 'svelte/store';
	import { uiState, filteredOptionsStore, groupedOptionsStore, actions } from './store';
	import { LAYOUT_CONTEXT_KEY } from './layoutContext';
	import OptionDisplayArea from './components/OptionDisplayArea.svelte';
	import { resize } from './actions/resize';
	import type { ViewModeDetail } from './components/ViewControl/types';
	import sequenceDataService from '$lib/services/SequenceDataService';
	import { sequenceStore } from '$lib/state/stores/sequenceStore';
	import OptionPickerHeader from './components/OptionPickerHeader/OptionPickerHeader.svelte';

	// Import utility functions from refactored modules
	import { sequenceBeatToPictographData } from './utils/TypeSafetyHelpers';
	import { 
		createWindowDimensionStores, 
		createSelectedTabStore, 
		createDerivedUIStores,
		createDebouncedResizeHandler 
	} from './utils/OptionPickerState';
	import { createLayoutContext } from './utils/OptionPickerLayoutContext';
	import { 
		createViewChangeHandler, 
		createSubTabSelectHandler, 
		createWindowResizeHandler 
	} from './utils/OptionPickerEventHandlers';
	import { 
		setupEventListeners, 
		cleanupEventListeners,
		loadOptionsFromSequence,
		initializeTabSelection,
		setupSequenceUpdateHandlers,
		cleanupSequenceUpdateHandlers
	} from './utils/OptionPickerInitialization';

	// --- State Stores ---
	const { 
		windowWidth, 
		windowHeight, 
		containerWidth, 
		containerHeight 
	} = createWindowDimensionStores();
	
	const selectedTab = createSelectedTabStore();

	// --- Derived UI State & Data ---
	const { 
		isLoading, 
		groupedOptions, 
		filteredOptions, 
		actualCategoryKeys, 
		optionsToDisplay, 
		showTabs 
	} = createDerivedUIStores(uiState, groupedOptionsStore, filteredOptionsStore, selectedTab);

	// --- Create Layout Context ---
	const layoutContextValue = createLayoutContext(
		windowWidth,
		windowHeight,
		containerWidth,
		containerHeight,
		uiState,
		filteredOptionsStore,
		groupedOptionsStore,
		selectedTab
	);

	// --- Set Context ---
	// Make the derived layout context available to child components
	setContext(LAYOUT_CONTEXT_KEY, layoutContextValue);

	// --- Reactive Access to Context (Optional) ---
	$: context = $layoutContextValue;

	// --- Event Handlers ---
	const debouncedHandleContainerResize = createDebouncedResizeHandler(containerWidth, containerHeight);
	const handleViewChange = createViewChangeHandler(selectedTab, uiState, actions);
	const handleSubTabSelect = createSubTabSelectHandler(selectedTab, uiState, actions);
	const updateWindowSize = createWindowResizeHandler(windowWidth, windowHeight);

	// --- onMount: Load options based on sequence ---
	onMount(() => {
		// Set up event listeners for tab selection and view changes
		const optionPickerElement = setupEventListeners(handleSubTabSelect, handleViewChange);

		// --- Initialization Logic ---
		const loadOptions = () => loadOptionsFromSequence(sequenceDataService, actions);
		
		// Initial load
		loadOptions();

		// Set up the tab selection
		initializeTabSelection(selectedTab, groupedOptionsStore, uiState, actions);

		// --- Event Listeners & Subscriptions ---
		window.addEventListener('resize', updateWindowSize);
		updateWindowSize();

		// Set up sequence update handlers
		const { 
			handleSequenceUpdate, 
			handleRefreshOptions, 
			unsubscribeSequence 
		} = setupSequenceUpdateHandlers(loadOptions, sequenceStore, actions);

		// --- Cleanup ---
		return () => {
			window.removeEventListener('resize', updateWindowSize);
			cleanupSequenceUpdateHandlers(
				handleSequenceUpdate, 
				handleRefreshOptions as EventListener, 
				unsubscribeSequence
			);
			cleanupEventListeners(optionPickerElement, handleSubTabSelect, handleViewChange);
		};
	});
</script>

<div class="option-picker" class:mobile={context.isMobile} class:portrait={context.isPortrait}>
	<OptionPickerHeader selectedTab={$selectedTab} categoryKeys={actualCategoryKeys} showTabs={$showTabs} />

	<div class="options-container" use:resize={debouncedHandleContainerResize}>
		<OptionDisplayArea
			isLoading={$isLoading}
			selectedTab={$selectedTab}
			optionsToDisplay={$optionsToDisplay}
			hasCategories={actualCategoryKeys.length > 0}
		/>
	</div>
</div>

<style>
	.option-picker {
		display: flex;
		flex-direction: column;
		width: 100%;
		height: 100%;
		box-sizing: border-box;
		overflow: hidden;
		position: relative;
		background-color: transparent; /* Or your desired background */
		justify-content: center; /* Center content vertically */
	}

	.options-container {
		flex: 1; /* Takes remaining vertical space */
		display: flex; /* Needed for children */
		position: relative; /* For absolute positioning of children like messages */
		border-radius: 8px;
		background-color: transparent; /* Or your desired background */
		min-height: 0; /* Crucial for flex child sizing */
		overflow: hidden; /* Contains children, prevents double scrollbars */
		justify-content: center; /* Center content vertically */
	}
	/* Optional: Constrain max width on large screens */
	@media (min-width: 1400px) {
		.option-picker {
			max-width: 1400px;
			margin: 0 auto;
		}
	}
</style>
