{"ast":null,"code":"class SnowflakeManager {\n  constructor() {\n    this.snowflakes = [];\n  }\n  initialize(width, height, count) {\n    for (let i = 0; i < count; i++) {\n      this.snowflakes.push({\n        x: Math.random() * width,\n        y: Math.random() * height,\n        speed: Math.random() * 2 + 1,\n        size: Math.random() * 3 + 1,\n        sway: Math.random() * 2 - 1,\n        opacity: Math.random() * 0.5 + 0.5\n      });\n    }\n  }\n  adjustPositions(widthChange, heightChange) {\n    if (widthChange === 0 && heightChange === 0) return;\n    this.snowflakes.forEach(flake => {\n      // Adjust positions proportionally based on size changes\n      if (widthChange !== 0) {\n        flake.x += flake.x / (window.innerWidth - widthChange) * widthChange;\n      }\n      if (heightChange !== 0) {\n        flake.y += flake.y / (window.innerHeight - heightChange) * heightChange;\n      }\n    });\n  }\n  draw(ctx, width, height) {\n    this.snowflakes.forEach(flake => {\n      ctx.globalAlpha = flake.opacity;\n      ctx.beginPath();\n      ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\n      ctx.fillStyle = \"white\";\n      ctx.fill();\n      flake.x += flake.sway;\n      flake.y += flake.speed;\n\n      // Reset if out of bounds\n      if (flake.y > height) flake.y = -flake.size;\n      if (flake.x > width || flake.x < 0) flake.x = Math.random() * width;\n    });\n    ctx.globalAlpha = 1.0; // Reset alpha\n  }\n}\nexport default SnowflakeManager;","map":{"version":3,"names":["SnowflakeManager","constructor","snowflakes","initialize","width","height","count","i","push","x","Math","random","y","speed","size","sway","opacity","adjustPositions","widthChange","heightChange","forEach","flake","window","innerWidth","innerHeight","draw","ctx","globalAlpha","beginPath","arc","PI","fillStyle","fill"],"sources":["C:/the-kinetic-constructor-web/src/components/Backgrounds/SnowflakeManager.js"],"sourcesContent":["class SnowflakeManager {\r\n  constructor() {\r\n    this.snowflakes = [];\r\n  }\r\n\r\n  initialize(width, height, count) {\r\n    for (let i = 0; i < count; i++) {\r\n      this.snowflakes.push({\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n        speed: Math.random() * 2 + 1,\r\n        size: Math.random() * 3 + 1,\r\n        sway: Math.random() * 2 - 1,\r\n        opacity: Math.random() * 0.5 + 0.5,\r\n      });\r\n    }\r\n  }\r\n\r\n  adjustPositions(widthChange, heightChange) {\r\n    if (widthChange === 0 && heightChange === 0) return;\r\n\r\n    this.snowflakes.forEach((flake) => {\r\n      // Adjust positions proportionally based on size changes\r\n      if (widthChange !== 0) {\r\n        flake.x += (flake.x / (window.innerWidth - widthChange)) * widthChange;\r\n      }\r\n      if (heightChange !== 0) {\r\n        flake.y += (flake.y / (window.innerHeight - heightChange)) * heightChange;\r\n      }\r\n    });\r\n  }\r\n\r\n  draw(ctx, width, height) {\r\n    this.snowflakes.forEach((flake) => {\r\n      ctx.globalAlpha = flake.opacity;\r\n      ctx.beginPath();\r\n      ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fill();\r\n      flake.x += flake.sway;\r\n      flake.y += flake.speed;\r\n\r\n      // Reset if out of bounds\r\n      if (flake.y > height) flake.y = -flake.size;\r\n      if (flake.x > width || flake.x < 0) flake.x = Math.random() * width;\r\n    });\r\n\r\n    ctx.globalAlpha = 1.0; // Reset alpha\r\n  }\r\n}\r\n\r\nexport default SnowflakeManager;\r\n"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAG,EAAE;EACtB;EAEAC,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAE;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;MAC9B,IAAI,CAACL,UAAU,CAACM,IAAI,CAAC;QACnBC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGP,KAAK;QACxBQ,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGN,MAAM;QACzBQ,KAAK,EAAEH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAC5BG,IAAI,EAAEJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAC3BI,IAAI,EAAEL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QAC3BK,OAAO,EAAEN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;MACjC,CAAC,CAAC;IACJ;EACF;EAEAM,eAAeA,CAACC,WAAW,EAAEC,YAAY,EAAE;IACzC,IAAID,WAAW,KAAK,CAAC,IAAIC,YAAY,KAAK,CAAC,EAAE;IAE7C,IAAI,CAACjB,UAAU,CAACkB,OAAO,CAAEC,KAAK,IAAK;MACjC;MACA,IAAIH,WAAW,KAAK,CAAC,EAAE;QACrBG,KAAK,CAACZ,CAAC,IAAKY,KAAK,CAACZ,CAAC,IAAIa,MAAM,CAACC,UAAU,GAAGL,WAAW,CAAC,GAAIA,WAAW;MACxE;MACA,IAAIC,YAAY,KAAK,CAAC,EAAE;QACtBE,KAAK,CAACT,CAAC,IAAKS,KAAK,CAACT,CAAC,IAAIU,MAAM,CAACE,WAAW,GAAGL,YAAY,CAAC,GAAIA,YAAY;MAC3E;IACF,CAAC,CAAC;EACJ;EAEAM,IAAIA,CAACC,GAAG,EAAEtB,KAAK,EAAEC,MAAM,EAAE;IACvB,IAAI,CAACH,UAAU,CAACkB,OAAO,CAAEC,KAAK,IAAK;MACjCK,GAAG,CAACC,WAAW,GAAGN,KAAK,CAACL,OAAO;MAC/BU,GAAG,CAACE,SAAS,CAAC,CAAC;MACfF,GAAG,CAACG,GAAG,CAACR,KAAK,CAACZ,CAAC,EAAEY,KAAK,CAACT,CAAC,EAAES,KAAK,CAACP,IAAI,EAAE,CAAC,EAAEJ,IAAI,CAACoB,EAAE,GAAG,CAAC,CAAC;MACrDJ,GAAG,CAACK,SAAS,GAAG,OAAO;MACvBL,GAAG,CAACM,IAAI,CAAC,CAAC;MACVX,KAAK,CAACZ,CAAC,IAAIY,KAAK,CAACN,IAAI;MACrBM,KAAK,CAACT,CAAC,IAAIS,KAAK,CAACR,KAAK;;MAEtB;MACA,IAAIQ,KAAK,CAACT,CAAC,GAAGP,MAAM,EAAEgB,KAAK,CAACT,CAAC,GAAG,CAACS,KAAK,CAACP,IAAI;MAC3C,IAAIO,KAAK,CAACZ,CAAC,GAAGL,KAAK,IAAIiB,KAAK,CAACZ,CAAC,GAAG,CAAC,EAAEY,KAAK,CAACZ,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGP,KAAK;IACrE,CAAC,CAAC;IAEFsB,GAAG,CAACC,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB;AACF;AAEA,eAAe3B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}