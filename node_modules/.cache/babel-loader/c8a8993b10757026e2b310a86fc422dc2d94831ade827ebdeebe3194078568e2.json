{"ast":null,"code":"class SantaManager {\n  constructor() {\n    this.santaImage = new Image();\n    this.santaImage.src = \"/images/santa.png\"; // Public folder assets are served from the root\n    this.imageLoaded = false;\n    this.santaImage.onload = () => {\n      console.log(\"Santa image loaded successfully.\");\n      this.imageLoaded = true;\n    };\n    this.santaImage.onerror = () => {\n      console.error(\"Failed to load Santa image.\");\n    };\n  }\n  initialize(width, height) {\n    this.santa = {\n      x: -0.2,\n      // Percentage of width\n      y: 0.2,\n      // Percentage of height\n      speed: 0.003,\n      // Percentage of width per frame\n      active: false,\n      direction: 1,\n      // 1 for left to right, -1 for right to left\n      opacity: 0.8\n    };\n    this.santaTimer = 0; // Timer to control when Santa appears\n    this.santaInterval = this.randomInt(200, 300); // Frames between appearances\n  }\n  randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  animateSanta() {\n    if (this.santa.active) {\n      this.santa.x += this.santa.speed * this.santa.direction;\n\n      // Check if Santa has moved off-screen\n      if (this.santa.direction === 1 && this.santa.x > 1.2 ||\n      // Offscreen right\n      this.santa.direction === -1 && this.santa.x < -0.2 // Offscreen left\n      ) {\n        this.santa.active = false;\n        this.santaTimer = 0;\n      }\n    } else {\n      this.santaTimer += 1;\n      if (this.santaTimer >= this.santaInterval) {\n        this.santa.active = true;\n        this.santa.direction = Math.random() < 0.5 ? -1 : 1;\n        this.santa.x = this.santa.direction === 1 ? -0.2 : 1.2;\n        this.santa.y = Math.random() * 0.2 + 0.1;\n        this.santa.speed = Math.random() * 0.002 + 0.003;\n        this.santaInterval = this.randomInt(500, 1000);\n      }\n    }\n  }\n  draw(ctx, width, height) {\n    if (!this.santa.active || !this.imageLoaded) {\n      console.log(\"Santa Image Not Loaded Yet\");\n      return;\n    }\n    const santaWidth = Math.max(50, Math.min(width * 0.05, 100));\n    const scalingFactor = santaWidth / this.santaImage.width;\n    const santaHeight = this.santaImage.height * scalingFactor;\n    const x = this.santa.x * width;\n    const y = this.santa.y * height;\n    ctx.save();\n    ctx.globalAlpha = this.santa.opacity;\n    if (this.santa.direction === 1) {\n      ctx.drawImage(this.santaImage, x, y, santaWidth, santaHeight);\n    } else {\n      ctx.translate(x + santaWidth, y);\n      ctx.scale(-1, 1);\n      ctx.drawImage(this.santaImage, 0, 0, santaWidth, santaHeight);\n    }\n    ctx.restore();\n    ctx.globalAlpha = 1.0;\n  }\n}\nexport default SantaManager;","map":{"version":3,"names":["SantaManager","constructor","santaImage","Image","src","imageLoaded","onload","console","log","onerror","error","initialize","width","height","santa","x","y","speed","active","direction","opacity","santaTimer","santaInterval","randomInt","min","max","Math","floor","random","animateSanta","draw","ctx","santaWidth","scalingFactor","santaHeight","save","globalAlpha","drawImage","translate","scale","restore"],"sources":["C:/the-kinetic-constructor-react/src/components/Backgrounds/SantaManager.js"],"sourcesContent":["class SantaManager {\r\n  constructor() {\r\n    this.santaImage = new Image();\r\n    this.santaImage.src = \"/images/santa.png\"; // Public folder assets are served from the root\r\n    this.imageLoaded = false;\r\n\r\n    this.santaImage.onload = () => {\r\n      console.log(\"Santa image loaded successfully.\");\r\n      this.imageLoaded = true;\r\n    };\r\n\r\n    this.santaImage.onerror = () => {\r\n      console.error(\"Failed to load Santa image.\");\r\n    };\r\n  }\r\n\r\n\r\n  initialize(width, height) {\r\n    this.santa = {\r\n      x: -0.2, // Percentage of width\r\n      y: 0.2, // Percentage of height\r\n      speed: 0.003, // Percentage of width per frame\r\n      active: false,\r\n      direction: 1, // 1 for left to right, -1 for right to left\r\n      opacity: 0.8,\r\n    };\r\n\r\n    this.santaTimer = 0; // Timer to control when Santa appears\r\n    this.santaInterval = this.randomInt(200, 300); // Frames between appearances\r\n  }\r\n\r\n  randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  animateSanta() {\r\n    if (this.santa.active) {\r\n      this.santa.x += this.santa.speed * this.santa.direction;\r\n\r\n      // Check if Santa has moved off-screen\r\n      if (\r\n        (this.santa.direction === 1 && this.santa.x > 1.2) || // Offscreen right\r\n        (this.santa.direction === -1 && this.santa.x < -0.2) // Offscreen left\r\n      ) {\r\n        this.santa.active = false;\r\n        this.santaTimer = 0;\r\n      }\r\n    } else {\r\n      this.santaTimer += 1;\r\n      if (this.santaTimer >= this.santaInterval) {\r\n        this.santa.active = true;\r\n        this.santa.direction = Math.random() < 0.5 ? -1 : 1;\r\n        this.santa.x = this.santa.direction === 1 ? -0.2 : 1.2;\r\n        this.santa.y = Math.random() * 0.2 + 0.1;\r\n        this.santa.speed = Math.random() * 0.002 + 0.003;\r\n        this.santaInterval = this.randomInt(500, 1000);\r\n      }\r\n    }\r\n  }\r\n\r\n  draw(ctx, width, height) {\r\n    if (!this.santa.active || !this.imageLoaded) {\r\n      console.log(\"Santa Image Not Loaded Yet\");\r\n      return;\r\n    }\r\n\r\n    const santaWidth = Math.max(50, Math.min(width * 0.05, 100));\r\n    const scalingFactor = santaWidth / this.santaImage.width;\r\n    const santaHeight = this.santaImage.height * scalingFactor;\r\n\r\n    const x = this.santa.x * width;\r\n    const y = this.santa.y * height;\r\n\r\n    ctx.save();\r\n    ctx.globalAlpha = this.santa.opacity;\r\n\r\n    if (this.santa.direction === 1) {\r\n      ctx.drawImage(this.santaImage, x, y, santaWidth, santaHeight);\r\n    } else {\r\n      ctx.translate(x + santaWidth, y);\r\n      ctx.scale(-1, 1);\r\n      ctx.drawImage(this.santaImage, 0, 0, santaWidth, santaHeight);\r\n    }\r\n\r\n    ctx.restore();\r\n\r\n    ctx.globalAlpha = 1.0;\r\n  }\r\n}\r\n\r\nexport default SantaManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}