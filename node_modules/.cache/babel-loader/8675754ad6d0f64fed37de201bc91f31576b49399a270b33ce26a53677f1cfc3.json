{"ast":null,"code":"class ShootingStarManager {\n  constructor() {\n    this.shootingStar = null;\n    this.timer = 0;\n    this.interval = this.randomInt(100, 300); // Random interval between shooting stars\n  }\n  randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  randomFloat(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n  spawnShootingStar(width, height) {\n    const middleY = height / 2; // Middle of the screen (Y-axis)\n\n    // Initial position: Either left or right\n    const startOptions = [{\n      x: -0.1 * width,\n      y: this.randomFloat(0.2, 0.8) * height\n    },\n    // From left\n    {\n      x: 1.1 * width,\n      y: this.randomFloat(0.2, 0.8) * height\n    } // From right\n    ];\n    const startPos = startOptions[Math.floor(Math.random() * startOptions.length)];\n\n    // Direction and speed\n    let dx = this.randomFloat(0.3, 0.5) * (startPos.x > 0 ? -1 : 1); // Left or right\n    let dy;\n\n    // Randomly choose upward or downward angle\n    if (Math.random() < 0.5) {\n      dy = -this.randomFloat(0.05, 0.2); // Slight angle up\n    } else {\n      dy = this.randomFloat(0.05, 0.2); // Slight angle down\n    }\n\n    // Adjust dy to gravitate towards the middle of the screen\n    if (startPos.y > middleY) {\n      dy -= this.randomFloat(0.02, 0.05); // Move upward if starting below the middle\n    } else {\n      dy += this.randomFloat(0.02, 0.05); // Move downward if starting above the middle\n    }\n\n    // Normalize direction vector for consistent speed\n    const norm = Math.sqrt(dx * dx + dy * dy);\n    dx /= norm;\n    dy /= norm;\n    this.shootingStar = {\n      x: startPos.x,\n      y: startPos.y,\n      dx: dx,\n      dy: dy,\n      size: this.randomFloat(5, 10),\n      speed: this.randomFloat(0.03, 0.06),\n      // Reduced speed for slower movement\n      tail: [],\n      prevX: startPos.x,\n      prevY: startPos.y,\n      tailLength: 30,\n      opacity: 1.0,\n      offScreen: false\n    };\n  }\n  animateShootingStar(width, height) {\n    if (!this.shootingStar) return;\n    const star = this.shootingStar;\n    const newX = star.x + star.dx * star.speed * width;\n    const newY = star.y + star.dy * star.speed * height;\n    const steps = 25; // Number of tail segments\n    for (let i = 0; i < steps; i++) {\n      const interpX = star.prevX + (newX - star.prevX) * (i / steps);\n      const interpY = star.prevY + (newY - star.prevY) * (i / steps);\n      star.tail.push({\n        x: interpX,\n        y: interpY,\n        size: star.size\n      });\n    }\n    star.prevX = star.x;\n    star.prevY = star.y;\n    star.x = newX;\n    star.y = newY;\n    if (star.x < -width * 0.1 || star.x > width * 1.1 || star.y > height * 1.1 || star.y < -height * 0.1) {\n      star.offScreen = true;\n    }\n    if (star.offScreen) {\n      star.opacity -= 0.05;\n      if (star.opacity <= 0) this.shootingStar = null;\n    }\n    if (star.tail.length > star.tailLength) {\n      star.tail.shift();\n    }\n  }\n  draw(ctx, width, height) {\n    if (!this.shootingStar) return;\n\n    // console.log(\"Drawing Shooting Star\"); // Debug log\n\n    const star = this.shootingStar;\n\n    // Draw tail\n    ctx.save();\n    const tailLength = star.tail.length;\n    star.tail.forEach((segment, index) => {\n      const opacity = (index + 1) / tailLength * star.opacity;\n      // console.log(`Tail Segment[${index}] Opacity: ${opacity}`); // Log tail opacity\n      ctx.globalAlpha = opacity;\n      ctx.beginPath();\n      ctx.arc(segment.x, segment.y, segment.size * opacity, 0, Math.PI * 2);\n      ctx.fillStyle = \"white\";\n      ctx.fill();\n    });\n    ctx.restore();\n\n    // Draw head\n    ctx.save();\n    ctx.globalAlpha = star.opacity;\n    // console.log(`Star Opacity: ${star.opacity}`); // Log star opacity\n    ctx.beginPath();\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n    ctx.fillStyle = \"white\";\n    ctx.fill();\n    ctx.restore();\n    ctx.globalAlpha = 1.0; // Reset alpha\n  }\n  manageShootingStar(width, height) {\n    this.timer += 1;\n    if (!this.shootingStar && this.timer >= this.interval) {\n      this.spawnShootingStar(width, height);\n      this.timer = 0;\n      this.interval = this.randomInt(100, 300);\n    }\n  }\n}\nexport default ShootingStarManager;","map":{"version":3,"names":["ShootingStarManager","constructor","shootingStar","timer","interval","randomInt","min","max","Math","floor","random","randomFloat","spawnShootingStar","width","height","middleY","startOptions","x","y","startPos","length","dx","dy","norm","sqrt","size","speed","tail","prevX","prevY","tailLength","opacity","offScreen","animateShootingStar","star","newX","newY","steps","i","interpX","interpY","push","shift","draw","ctx","save","forEach","segment","index","globalAlpha","beginPath","arc","PI","fillStyle","fill","restore","manageShootingStar"],"sources":["C:/the-kinetic-constructor-web/src/components/Backgrounds/ShootingStarManager.js"],"sourcesContent":["class ShootingStarManager {\r\n  constructor() {\r\n    this.shootingStar = null;\r\n    this.timer = 0;\r\n    this.interval = this.randomInt(100, 300); // Random interval between shooting stars\r\n  }\r\n\r\n  randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  randomFloat(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  spawnShootingStar(width, height) {\r\n    const middleY = height / 2; // Middle of the screen (Y-axis)\r\n\r\n    // Initial position: Either left or right\r\n    const startOptions = [\r\n      { x: -0.1 * width, y: this.randomFloat(0.2, 0.8) * height }, // From left\r\n      { x: 1.1 * width, y: this.randomFloat(0.2, 0.8) * height }, // From right\r\n    ];\r\n    const startPos = startOptions[Math.floor(Math.random() * startOptions.length)];\r\n\r\n    // Direction and speed\r\n    let dx = this.randomFloat(0.3, 0.5) * (startPos.x > 0 ? -1 : 1); // Left or right\r\n    let dy;\r\n\r\n    // Randomly choose upward or downward angle\r\n    if (Math.random() < 0.5) {\r\n      dy = -this.randomFloat(0.05, 0.2); // Slight angle up\r\n    } else {\r\n      dy = this.randomFloat(0.05, 0.2); // Slight angle down\r\n    }\r\n\r\n    // Adjust dy to gravitate towards the middle of the screen\r\n    if (startPos.y > middleY) {\r\n      dy -= this.randomFloat(0.02, 0.05); // Move upward if starting below the middle\r\n    } else {\r\n      dy += this.randomFloat(0.02, 0.05); // Move downward if starting above the middle\r\n    }\r\n\r\n    // Normalize direction vector for consistent speed\r\n    const norm = Math.sqrt(dx * dx + dy * dy);\r\n    dx /= norm;\r\n    dy /= norm;\r\n\r\n    this.shootingStar = {\r\n      x: startPos.x,\r\n      y: startPos.y,\r\n      dx: dx,\r\n      dy: dy,\r\n      size: this.randomFloat(5, 10),\r\n      speed: this.randomFloat(0.03, 0.06), // Reduced speed for slower movement\r\n      tail: [],\r\n      prevX: startPos.x,\r\n      prevY: startPos.y,\r\n      tailLength: 30,\r\n      opacity: 1.0,\r\n      offScreen: false,\r\n    };\r\n  }\r\n\r\n  animateShootingStar(width, height) {\r\n    if (!this.shootingStar) return;\r\n\r\n    const star = this.shootingStar;\r\n    const newX = star.x + star.dx * star.speed * width;\r\n    const newY = star.y + star.dy * star.speed * height;\r\n\r\n    const steps = 25; // Number of tail segments\r\n    for (let i = 0; i < steps; i++) {\r\n      const interpX = star.prevX + (newX - star.prevX) * (i / steps);\r\n      const interpY = star.prevY + (newY - star.prevY) * (i / steps);\r\n      star.tail.push({ x: interpX, y: interpY, size: star.size });\r\n    }\r\n\r\n    star.prevX = star.x;\r\n    star.prevY = star.y;\r\n    star.x = newX;\r\n    star.y = newY;\r\n\r\n    if (star.x < -width * 0.1 || star.x > width * 1.1 || star.y > height * 1.1 || star.y < -height * 0.1) {\r\n      star.offScreen = true;\r\n    }\r\n\r\n    if (star.offScreen) {\r\n      star.opacity -= 0.05;\r\n      if (star.opacity <= 0) this.shootingStar = null;\r\n    }\r\n\r\n    if (star.tail.length > star.tailLength) {\r\n      star.tail.shift();\r\n    }\r\n  }\r\n\r\n  draw(ctx, width, height) {\r\n    if (!this.shootingStar) return;\r\n\r\n    // console.log(\"Drawing Shooting Star\"); // Debug log\r\n\r\n    const star = this.shootingStar;\r\n\r\n    // Draw tail\r\n    ctx.save();\r\n    const tailLength = star.tail.length;\r\n    star.tail.forEach((segment, index) => {\r\n      const opacity = ((index + 1) / tailLength) * star.opacity;\r\n      // console.log(`Tail Segment[${index}] Opacity: ${opacity}`); // Log tail opacity\r\n      ctx.globalAlpha = opacity;\r\n      ctx.beginPath();\r\n      ctx.arc(segment.x, segment.y, segment.size * opacity, 0, Math.PI * 2);\r\n      ctx.fillStyle = \"white\";\r\n      ctx.fill();\r\n    });\r\n    ctx.restore();\r\n\r\n    // Draw head\r\n    ctx.save();\r\n    ctx.globalAlpha = star.opacity;\r\n    // console.log(`Star Opacity: ${star.opacity}`); // Log star opacity\r\n    ctx.beginPath();\r\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fill();\r\n    ctx.restore();\r\n\r\n    ctx.globalAlpha = 1.0; // Reset alpha\r\n  }\r\n\r\n\r\n\r\n  manageShootingStar(width, height) {\r\n    this.timer += 1;\r\n    if (!this.shootingStar && this.timer >= this.interval) {\r\n      this.spawnShootingStar(width, height);\r\n      this.timer = 0;\r\n      this.interval = this.randomInt(100, 300);\r\n    }\r\n  }\r\n}\r\n\r\nexport default ShootingStarManager;\r\n"],"mappings":"AAAA,MAAMA,mBAAmB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5C;EAEAA,SAASA,CAACC,GAAG,EAAEC,GAAG,EAAE;IAClB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1D;EAEAK,WAAWA,CAACL,GAAG,EAAEC,GAAG,EAAE;IACpB,OAAOC,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG;EAC1C;EAEAM,iBAAiBA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC/B,MAAMC,OAAO,GAAGD,MAAM,GAAG,CAAC,CAAC,CAAC;;IAE5B;IACA,MAAME,YAAY,GAAG,CACnB;MAAEC,CAAC,EAAE,CAAC,GAAG,GAAGJ,KAAK;MAAEK,CAAC,EAAE,IAAI,CAACP,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,GAAGG;IAAO,CAAC;IAAE;IAC7D;MAAEG,CAAC,EAAE,GAAG,GAAGJ,KAAK;MAAEK,CAAC,EAAE,IAAI,CAACP,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,GAAGG;IAAO,CAAC,CAAE;IAAA,CAC7D;IACD,MAAMK,QAAQ,GAAGH,YAAY,CAACR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGM,YAAY,CAACI,MAAM,CAAC,CAAC;;IAE9E;IACA,IAAIC,EAAE,GAAG,IAAI,CAACV,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,IAAIQ,QAAQ,CAACF,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjE,IAAIK,EAAE;;IAEN;IACA,IAAId,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE;MACvBY,EAAE,GAAG,CAAC,IAAI,CAACX,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IACrC,CAAC,MAAM;MACLW,EAAE,GAAG,IAAI,CAACX,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IACpC;;IAEA;IACA,IAAIQ,QAAQ,CAACD,CAAC,GAAGH,OAAO,EAAE;MACxBO,EAAE,IAAI,IAAI,CAACX,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACLW,EAAE,IAAI,IAAI,CAACX,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACtC;;IAEA;IACA,MAAMY,IAAI,GAAGf,IAAI,CAACgB,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IACzCD,EAAE,IAAIE,IAAI;IACVD,EAAE,IAAIC,IAAI;IAEV,IAAI,CAACrB,YAAY,GAAG;MAClBe,CAAC,EAAEE,QAAQ,CAACF,CAAC;MACbC,CAAC,EAAEC,QAAQ,CAACD,CAAC;MACbG,EAAE,EAAEA,EAAE;MACNC,EAAE,EAAEA,EAAE;MACNG,IAAI,EAAE,IAAI,CAACd,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC;MAC7Be,KAAK,EAAE,IAAI,CAACf,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC;MAAE;MACrCgB,IAAI,EAAE,EAAE;MACRC,KAAK,EAAET,QAAQ,CAACF,CAAC;MACjBY,KAAK,EAAEV,QAAQ,CAACD,CAAC;MACjBY,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE,GAAG;MACZC,SAAS,EAAE;IACb,CAAC;EACH;EAEAC,mBAAmBA,CAACpB,KAAK,EAAEC,MAAM,EAAE;IACjC,IAAI,CAAC,IAAI,CAACZ,YAAY,EAAE;IAExB,MAAMgC,IAAI,GAAG,IAAI,CAAChC,YAAY;IAC9B,MAAMiC,IAAI,GAAGD,IAAI,CAACjB,CAAC,GAAGiB,IAAI,CAACb,EAAE,GAAGa,IAAI,CAACR,KAAK,GAAGb,KAAK;IAClD,MAAMuB,IAAI,GAAGF,IAAI,CAAChB,CAAC,GAAGgB,IAAI,CAACZ,EAAE,GAAGY,IAAI,CAACR,KAAK,GAAGZ,MAAM;IAEnD,MAAMuB,KAAK,GAAG,EAAE,CAAC,CAAC;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;MAC9B,MAAMC,OAAO,GAAGL,IAAI,CAACN,KAAK,GAAG,CAACO,IAAI,GAAGD,IAAI,CAACN,KAAK,KAAKU,CAAC,GAAGD,KAAK,CAAC;MAC9D,MAAMG,OAAO,GAAGN,IAAI,CAACL,KAAK,GAAG,CAACO,IAAI,GAAGF,IAAI,CAACL,KAAK,KAAKS,CAAC,GAAGD,KAAK,CAAC;MAC9DH,IAAI,CAACP,IAAI,CAACc,IAAI,CAAC;QAAExB,CAAC,EAAEsB,OAAO;QAAErB,CAAC,EAAEsB,OAAO;QAAEf,IAAI,EAAES,IAAI,CAACT;MAAK,CAAC,CAAC;IAC7D;IAEAS,IAAI,CAACN,KAAK,GAAGM,IAAI,CAACjB,CAAC;IACnBiB,IAAI,CAACL,KAAK,GAAGK,IAAI,CAAChB,CAAC;IACnBgB,IAAI,CAACjB,CAAC,GAAGkB,IAAI;IACbD,IAAI,CAAChB,CAAC,GAAGkB,IAAI;IAEb,IAAIF,IAAI,CAACjB,CAAC,GAAG,CAACJ,KAAK,GAAG,GAAG,IAAIqB,IAAI,CAACjB,CAAC,GAAGJ,KAAK,GAAG,GAAG,IAAIqB,IAAI,CAAChB,CAAC,GAAGJ,MAAM,GAAG,GAAG,IAAIoB,IAAI,CAAChB,CAAC,GAAG,CAACJ,MAAM,GAAG,GAAG,EAAE;MACpGoB,IAAI,CAACF,SAAS,GAAG,IAAI;IACvB;IAEA,IAAIE,IAAI,CAACF,SAAS,EAAE;MAClBE,IAAI,CAACH,OAAO,IAAI,IAAI;MACpB,IAAIG,IAAI,CAACH,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC7B,YAAY,GAAG,IAAI;IACjD;IAEA,IAAIgC,IAAI,CAACP,IAAI,CAACP,MAAM,GAAGc,IAAI,CAACJ,UAAU,EAAE;MACtCI,IAAI,CAACP,IAAI,CAACe,KAAK,CAAC,CAAC;IACnB;EACF;EAEAC,IAAIA,CAACC,GAAG,EAAE/B,KAAK,EAAEC,MAAM,EAAE;IACvB,IAAI,CAAC,IAAI,CAACZ,YAAY,EAAE;;IAExB;;IAEA,MAAMgC,IAAI,GAAG,IAAI,CAAChC,YAAY;;IAE9B;IACA0C,GAAG,CAACC,IAAI,CAAC,CAAC;IACV,MAAMf,UAAU,GAAGI,IAAI,CAACP,IAAI,CAACP,MAAM;IACnCc,IAAI,CAACP,IAAI,CAACmB,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACpC,MAAMjB,OAAO,GAAI,CAACiB,KAAK,GAAG,CAAC,IAAIlB,UAAU,GAAII,IAAI,CAACH,OAAO;MACzD;MACAa,GAAG,CAACK,WAAW,GAAGlB,OAAO;MACzBa,GAAG,CAACM,SAAS,CAAC,CAAC;MACfN,GAAG,CAACO,GAAG,CAACJ,OAAO,CAAC9B,CAAC,EAAE8B,OAAO,CAAC7B,CAAC,EAAE6B,OAAO,CAACtB,IAAI,GAAGM,OAAO,EAAE,CAAC,EAAEvB,IAAI,CAAC4C,EAAE,GAAG,CAAC,CAAC;MACrER,GAAG,CAACS,SAAS,GAAG,OAAO;MACvBT,GAAG,CAACU,IAAI,CAAC,CAAC;IACZ,CAAC,CAAC;IACFV,GAAG,CAACW,OAAO,CAAC,CAAC;;IAEb;IACAX,GAAG,CAACC,IAAI,CAAC,CAAC;IACVD,GAAG,CAACK,WAAW,GAAGf,IAAI,CAACH,OAAO;IAC9B;IACAa,GAAG,CAACM,SAAS,CAAC,CAAC;IACfN,GAAG,CAACO,GAAG,CAACjB,IAAI,CAACjB,CAAC,EAAEiB,IAAI,CAAChB,CAAC,EAAEgB,IAAI,CAACT,IAAI,EAAE,CAAC,EAAEjB,IAAI,CAAC4C,EAAE,GAAG,CAAC,CAAC;IAClDR,GAAG,CAACS,SAAS,GAAG,OAAO;IACvBT,GAAG,CAACU,IAAI,CAAC,CAAC;IACVV,GAAG,CAACW,OAAO,CAAC,CAAC;IAEbX,GAAG,CAACK,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB;EAIAO,kBAAkBA,CAAC3C,KAAK,EAAEC,MAAM,EAAE;IAChC,IAAI,CAACX,KAAK,IAAI,CAAC;IACf,IAAI,CAAC,IAAI,CAACD,YAAY,IAAI,IAAI,CAACC,KAAK,IAAI,IAAI,CAACC,QAAQ,EAAE;MACrD,IAAI,CAACQ,iBAAiB,CAACC,KAAK,EAAEC,MAAM,CAAC;MACrC,IAAI,CAACX,KAAK,GAAG,CAAC;MACd,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;IAC1C;EACF;AACF;AAEA,eAAeL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}